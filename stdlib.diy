;; Some logical operators.

(define not
    (lambda (b)
        (if b #f #t)
        ))

(define or
    (lambda (a b)
        (if a #t (if b #t #f))
        ))

(define and
    (lambda (a b)
        (if a (if b #t #f) #f)
        ))

(define xor
    (lambda (a b)
        (and (or a b)
             (not (and a b))
             )))

(define >=
    (lambda (a b)
        (or (eq a b)
            (> a b)
            )))

(define <=
    (lambda (a b)
        (or (eq a b)
            (< a b)
            )))

(define sum
    (lambda (a)
    (if (not (empty a))
        (+ (head a) (sum (tail a)))
        0
        )))

(define length
    (lambda (a)
        (if (empty a)
            0
            (+ 1 (length (tail a)))
                )))

(define append
    (lambda (a b)
        (if (empty a)
            b
            (if (empty b)
                a
                (cons (head a) (append (tail a) b))
                ))))

(define filter
        (lambda (fn list)
            (if (empty list)
                list
                (if (fn (head list))
                    (cons (head list) (filter fn (tail list)))
                    (filter fn (tail list))
                    ))))

(define map
        (lambda (fn list)
            (if (empty list)
                list
                 (cons (fn (head list)) (map fn (tail list)))
                 )))
                 




;; DIY -- Implement the rest of your standard library
;; here as part 7 of the workshop.
